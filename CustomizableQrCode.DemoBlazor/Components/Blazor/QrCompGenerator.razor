@using System.Threading.Tasks
@using CustomizableQrCode.Utils
@using CustomizableQrCode.Logic
@using CustomizableQrCode.Models
@using System.Text
@using CustomizableQrCode.QrCodeRenderer
@using static CustomizableQrCode.Models.QrModels
@inject IJSRuntime JS


<div class="radial-selector-container" aria-label="Selector tipo de QR">
    <div class="qr-main-content">
        <!-- Sidebar -->
        <div class="sidebar-qr-types">
            @foreach (var (opt, idx) in QrTypes.Select((opt, idx) => (opt, idx)))
            {
                if (!AppEnvironment.IsTestMode && !showAllTypes && idx >= visibleTypesCount)
                {
                    continue;
                }
                <button class="sidebar-btn @(SelectedType == opt.Type ? "active" : "")"
                        @onclick="() => SelectType(opt.Type)">
                    <i class="@opt.Icon"></i>
                    <span class="qr-type-tooltip">@opt.Tooltip</span>
                </button>
            }

            @if (QrTypes.Count > visibleTypesCount)
            {
                <button class="sidebar-btn" @onclick="ToggleSidebarTypes" 
                        @onmouseover="() => ShowTooltip = true"
                        @onmouseout="() => ShowTooltip = false">
                    @if (showAllTypes)
                    {
                        <i class="fas fa-chevron-up"></i>
                    }
                    else
                    {
                        <i class="fas fa-ellipsis-h"></i>
                    }
                    @if (ShowTooltip)
                    {
                        <span class="qr-type-tooltip">
                            @(showAllTypes ? "Menos tipo de contenido" : "Más tipo de contenido")
                        </span>
                    }
                </button>
            }
        </div>

        <!-- Sidebar -->
        <!-- Botón flotante -->
        <button class="floating-toggle-btn" @onclick="ToggleSidebar">
            <i class="fas @(isSidebarOpen ? "fa-times" : "fa-bars")"></i>
        </button>

        @if (isSidebarOpen)
        {
            <div class="fullscreen-sidebar-overlay" @onclick="ToggleSidebar">
                <div class="sidebar-panel" @onclick:stopPropagation="true">
                    @* @foreach (var (opt, idx) in QrTypes.Select((opt, idx) => (opt, idx)))
                    {
                        if (!AppEnvironment.IsTestMode && !showAllTypes && idx >= visibleTypesCount)
                            continue;

                        <button class="sidebar-btn @(SelectedType == opt.Type ? "active" : "")"
                                @onclick="() => SelectType(opt.Type)">
                            <i class="@opt.Icon"></i>
                            <span class="qr-type-tooltip">@opt.Tooltip</span>
                        </button>
                    } *@
                    @foreach (var opt in QrTypes)
                    {
                        <button class="sidebar-btn @(SelectedType == opt.Type ? "active" : "")"
                                @onclick="() => SelectType(opt.Type)">
                            <i class="@opt.Icon"></i>
                            <span class="qr-type-tooltip">@opt.Tooltip</span>
                        </button>
                    }
                    @* @if (QrTypes.Count > visibleTypesCount)
                    {
                        <button class="sidebar-btn" @onclick="ToggleSidebarTypes">
                            <i class="fas @(showAllTypes ? "fa-chevron-up" : "fa-ellipsis-h")"></i>
                            <span class="qr-type-tooltip">
                                @(showAllTypes ? "Menos tipo de contenido" : "Más tipo de contenido")
                            </span>
                        </button>
                    } *@
                </div>
            </div>
        }

        <!-- Izquierda: controles configurables -->
        <!-- Controles dinámicos según tipo -->
        @* Este bloque cambia según el tipo seleccionado *@
        <div class="main-content">
            <div class="qr-form-col">
                <div class="qr-content-section">
                    <div class="qr-config-card">
                        @switch (SelectedType)
                            {
                                case QrContentType.Link:
                                    <div class="qr-config-fields">
                                        <div class="full-width">
                                            <label class="qr-label">Enlace</label>
                                            <InputText @bind-Value="LinkUrl" class="qr-input" placeholder="Introduce la dirección"  />
                                            @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.Link)
                                            {
                                                <div class="error-msg">@errorMsg</div>
                                            }
                                        </div>
                                    </div>
                                    break;

                                case QrContentType.Text:
                                    <div class="qr-config-fields">
                                        <div class="full-width">
                                            <label class="qr-label">Texto</label>
                                            <InputTextArea @bind-Value="TextContent" class="qr-textarea" placeholder="Introduce el texto..." />
                                            @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.Text)
                                            {
                                                <div class="error-msg">@errorMsg</div>
                                            }
                                        </div>
                                    </div>
                                    break;

                                case QrContentType.Email:
                                    <div class="qr-config-fields">
                                        <div>
                                            <label class="qr-label">Correo destinatario</label>
                                            <InputText @bind-Value="EmailTo" class="qr-input" placeholder="ejemplo@email.com" />
                                        </div>
                                        <div>
                                            <label class="qr-label">Asunto</label>
                                            <InputText @bind-Value="EmailSubject" class="qr-input" placeholder="Asunto del correo" />
                                        </div>
                                        <div class="full-width">
                                            <label class="qr-label">Mensaje</label>
                                            <InputTextArea @bind-Value="EmailBody" class="qr-textarea" placeholder="Escribe tu mensaje..." />
                                        </div>
                                        @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.Email)
                                        {
                                            <div class="error-msg">@errorMsg</div>
                                        }
                                    </div>
                                    break;

                                case QrContentType.Call:
                                    <div class="qr-config-fields">
                                        <div class="full-width">
                                            <label class="qr-label">Teléfono</label>
                                            <InputText @bind-Value="Phone" class="qr-input" placeholder="Ej: +521234567890" />
                                            @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.Call)
                                            {
                                                <div class="error-msg">@errorMsg</div>
                                            }
                                        </div>
                                    </div>
                                    break;

                                case QrContentType.SMS:
                                    <div class="qr-config-fields">
                                        <div>
                                            <label class="qr-label">Teléfono</label>
                                            <InputText @bind-Value="SmsPhone" class="qr-input" placeholder="Teléfono" />
                                        </div>
                                        <div class="full-width">
                                            <label class="qr-label">Mensaje SMS</label>
                                            <InputTextArea @bind-Value="SmsMessage" class="qr-textarea" placeholder="Mensaje SMS" />
                                        </div>
                                        @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.SMS)
                                        {
                                            <div class="error-msg">@errorMsg</div>
                                        }
                                    </div>
                                    break;

                                case QrContentType.VCard:
                                    <div class="qr-config-fields">
                                        <div>
                                            <label class="qr-label">Nombre</label>
                                            <InputText @bind-Value="VCardFirstName" class="qr-input" placeholder="Nombre" />
                                        </div>
                                        <div>
                                            <label class="qr-label">Apellido</label>
                                            <InputText @bind-Value="VCardLastName" class="qr-input" placeholder="Apellido" />
                                        </div>
                                        <div>
                                            <label class="qr-label">Teléfono</label>
                                            <InputText @bind-Value="VCardPhone" class="qr-input" placeholder="Teléfono" />
                                        </div>
                                        <div>
                                            <label class="qr-label">Email</label>
                                            <InputText @bind-Value="VCardEmail" class="qr-input" placeholder="Email" />
                                        </div>
                                        <div>
                                            <label class="qr-label">Empresa</label>
                                            <InputText @bind-Value="VCardCompany" class="qr-input" placeholder="Empresa" />
                                        </div>
                                        <div>
                                            <label class="qr-label">Cargo</label>
                                            <InputText @bind-Value="VCardJob" class="qr-input" placeholder="Cargo" />
                                        </div>
                                        <div class="full-width">
                                            <label class="qr-label">Dirección</label>
                                            <InputText @bind-Value="VCardAddress" class="qr-input" placeholder="Dirección" />
                                        </div>
                                        @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.VCard)
                                        {
                                            <div class="error-msg">@errorMsg</div>
                                        }
                                    </div>
                                    break;

                                case QrContentType.WhatsApp:
                                    <div class="qr-config-fields">
                                        <div>
                                            <label class="qr-label">Teléfono WhatsApp</label>
                                            <InputText @bind-Value="WhatsAppPhone" class="qr-input" placeholder="Teléfono WhatsApp" />
                                        </div>
                                        <div class="full-width">
                                            <label class="qr-label">Mensaje</label>
                                            <InputTextArea @bind-Value="WhatsAppMessage" class="qr-textarea" placeholder="Mensaje para enviar" />
                                        </div>
                                        @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.WhatsApp)
                                        {
                                            <div class="error-msg">@errorMsg</div>
                                        }
                                    </div>
                                    break;

                                case QrContentType.WiFi:
                                    <div class="qr-config-fields">
                                        <div>
                                            <label class="qr-label">Nombre de Red (SSID)</label>
                                            <InputText @bind-Value="WiFiSSID" class="qr-input" placeholder="Nombre de red" />
                                        </div>
                                        <div>
                                            <label class="qr-label">Contraseña</label>
                                            <InputText @bind-Value="WiFiPassword" class="qr-input" placeholder="Contraseña" />
                                        </div>
                                        <div>
                                            <label class="qr-label">Tipo</label>
                                            <InputSelect @bind-Value="WiFiEncryption" class="qr-select">
                                                <option value="WPA">WPA/WPA2</option>
                                                <option value="WEP">WEP</option>
                                                <option value="nopass">Sin contraseña</option>
                                            </InputSelect>
                                        </div>
                                        @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.WiFi)
                                        {
                                            <div class="error-msg">@errorMsg</div>
                                        }
                                    </div>
                                    break;

                                case QrContentType.PDF:
                                    <div class="qr-config-fields">
                                        <div class="full-width">
                                            <label class="qr-label">URL del PDF</label>
                                            <InputText @bind-Value="PdfUrl" class="qr-input" placeholder="URL del PDF" />
                                            @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.PDF)
                                            {
                                                <div class="error-msg">@errorMsg</div>
                                            }
                                        </div>
                                    </div>
                                    break;

                                case QrContentType.App:
                                    <div class="qr-config-fields">
                                        <div class="full-width">
                                            <label class="qr-label">URL de la app</label>
                                            <InputText @bind-Value="AppUrl" class="qr-input" placeholder="URL de la App (App Store, Play Store...)" />
                                            @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.App)
                                            {
                                                <div class="error-msg">@errorMsg</div>
                                            }
                                        </div>
                                    </div>
                                    break;

                                case QrContentType.Images:
                                    <div class="qr-config-fields">
                                        <div class="full-width">
                                            <label class="qr-label">URL de la imagen</label>
                                            <InputText @bind-Value="ImageUrl" class="qr-input" placeholder="URL de la imagen" />
                                            @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.Images)
                                            {
                                                <div class="error-msg">@errorMsg</div>
                                            }
                                        </div>
                                    </div>
                                    break;

                                case QrContentType.Video:
                                    <div class="qr-config-fields">
                                        <div class="full-width">
                                            <label class="qr-label">URL del video</label>
                                            <InputText @bind-Value="VideoUrl" class="qr-input" placeholder="URL del video" />
                                            @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.Video)
                                            {
                                                <div class="error-msg">@errorMsg</div>
                                            }
                                        </div>
                                    </div>
                                    break;

                                case QrContentType.SocialMedia:
                                    <div class="qr-config-fields">
                                        <div class="full-width">
                                            <label class="qr-label">URL del perfil/red social</label>
                                            <InputText @bind-Value="SocialUrl" class="qr-input" placeholder="URL del perfil social" />
                                            @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.SocialMedia)
                                            {
                                                <div class="error-msg">@errorMsg</div>
                                            }
                                        </div>
                                    </div>
                                    break;

                                case QrContentType.Event:
                                    <div class="qr-config-fields">
                                        <div>
                                            <label class="qr-label">Título del evento</label>
                                            <InputText @bind-Value="EventTitle" class="qr-input" placeholder="Título del evento" />
                                        </div>
                                        <div>
                                            <label class="qr-label">Ubicación</label>
                                            <InputText @bind-Value="EventLocation" class="qr-input" placeholder="Ubicación" />
                                        </div>
                                        <div>
                                            <label class="qr-label">Fecha de inicio</label>
                                            <InputText @bind-Value="EventStart" class="qr-input" placeholder="YYYY-MM-DD HH:mm" />
                                        </div>
                                        <div>
                                            <label class="qr-label">Fecha de fin</label>
                                            <InputText @bind-Value="EventEnd" class="qr-input" placeholder="YYYY-MM-DD HH:mm" />
                                        </div>
                                        @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.Event)
                                        {
                                            <div class="error-msg">@errorMsg</div>
                                        }
                                    </div>
                                    break;

                                case QrContentType.Barcode2D:
                                    <div class="qr-config-fields">
                                        <div class="full-width">
                                            <label class="qr-label">Contenido de código de barras</label>
                                            <InputText @bind-Value="Barcode2DContent" class="qr-input" placeholder="Texto o número" />
                                            @if (!string.IsNullOrEmpty(errorMsg) && SelectedType == QrContentType.Barcode2D)
                                            {
                                                <div class="error-msg">@errorMsg</div>
                                            }
                                        </div>
                                    </div>
                                    break;
                            }
                
                    </div>
                </div>

                <div class="qr-style-section">
                    <!-- Controles comunes (personalización) -->
                    <div class="qr-config-common">

                        <EditForm Model="qrOptions">
                            <div class="qr-card">

                                <!-- 1a fila: Módulo + Ojo-Marco -->
                                <div class="qr-row">
                                    <div class="qr-group-double">
                                        <QrModuleShapeSelector SelectedShape="qrOptions.ModuleShape" 
                                                                SelectedShapeChanged="OnShapeChanged" 
                                                                SelectedColor="qrOptions.ModuleColor" 
                                                                SelectedColorChanged="OnColorShapeChanged" />
                                            @if (showToastColor)
                                            {
                                                <div class="qr-toast-warning">
                                                    @toastMessage
                                                </div>
                                            }
                                    </div>
                                </div>

                                <!-- 1a fila: Módulo + Ojo-Marco -->
                                <div class="qr-row">
                                    <div class="qr-group-double">
                                        <QrEyeFrameShapeSelector SelectedShape="qrOptions.EyeFrameShape"
                                                                    SelectedShapeChanged="OnFrameChanged"
                                                                    SelectedColor="qrOptions.EyeFrameColor"
                                                                     SelectedColorChanged="OnFrameColorChanged"
                                                                     IsExpanded='@(ExpandedSection == "Frame")'
                                                                     ToggleRequested='@(() => ToggleSection("Frame"))' />
                                    </div>
                                </div>

                                <!-- 2a fila: Ojo-Centro + Ojo-retro -->
                                <div class="qr-row">
                                    <div class="qr-group-double">
                                        <QrEyeCenterShapeSelector SelectedEyeShape="qrOptions.EyeCenterShape"
                                                                    SelectedEyeShapeChanged="OnCenterEyeChanged"
                                                                    SelectedEyeColor="qrOptions.EyeCenterColor"
                                                                      SelectedEyeColorChanged="OnCenterEyeColorChanged"
                                                                      IsExpanded='@(ExpandedSection == "Center")'
                                                                      ToggleRequested='@(() => ToggleSection("Center"))'
                                                                      AllowedCenters="AllowedCenters" />
                                    </div>
                                </div>

                                <!-- 3a fila: Corrección + Tamaño -->
                                <div class="qr-row">
                                    <div class="qr-group-simple">
                                        <label>
                                            Corrección
                                            <span class="custom-tooltip">
                                                <svg width="18" height="18" style="vertical-align:middle;">
                                                    <circle cx="9" cy="9" r="9" fill="#23a6e8" />
                                                    <text x="9" y="14" text-anchor="middle" font-size="14" fill="#fff">?</text>
                                                </svg>
                                                <span class="custom-tooltip-text">Define cuánta información puede recuperar el QR si se daña o ensucia. Q es estándar, H es máximo.</span>
                                            </span>
                                        </label>
                                        <InputSelect @bind-Value="qrOptions.CorrectionLevel" class="qr-input">
                                            @foreach (var level in Enum.GetNames(typeof(QrCorrectionLevel)))
                                            {
                                                <option value="@level">@level</option>
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="qr-group-simple" style="display:none">
                                        <label>
                                            Tamaño
                                            <span class="custom-tooltip">
                                                <svg width="18" height="18" style="vertical-align:middle;">
                                                    <circle cx="9" cy="9" r="9" fill="#23a6e8" />
                                                    <text x="9" y="14" text-anchor="middle" font-size="14" fill="#fff">?</text>
                                                </svg>
                                                <span class="custom-tooltip-text"> Tamaño en píxeles del QR generado. </span>
                                            </span>
                                        </label>
                                        <InputNumber @bind-Value="qrOptions.Size" min="128" max="1024" class="qr-input" />
                                    </div>
                                    <div class="qr-group-simple">
                                        <label>
                                            Calidad
                                            <span class="custom-tooltip">
                                                <svg width="18" height="18" style="vertical-align:middle;">
                                                    <circle cx="9" cy="9" r="9" fill="#23a6e8" />
                                                    <text x="9" y="14" text-anchor="middle" font-size="14" fill="#fff">?</text>
                                                </svg>
                                                <span class="custom-tooltip-text">Entre mayor calidad, el código QR se verá más nítido al exportar o imprimir.</span>
                                            </span>
                                        </label>
                                        <div class="quality-slider-wrap">
                                            <button @onclick="DecrementQuality" class="icon-btn">
                                                <i class="fas fa-minus"></i>
                                            </button>
                                            <input type="range"
                                                    min="0" max="4" step="1"
                                                    @onmousedown="@(() => isSliderActive = true)"
                                                    @onmouseup="@(() => isSliderActive = false)"
                                                    @onmouseleave="@(() => isSliderActive = false)"
                                                    class="quality-slider slider @(isSliderActive ? "engranaje-activo" : "")"
                                                    @bind="Quality" />
                                            <button @onclick="IncrementQuality" class="icon-btn">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                        </div>
                                        <div class="text-center fw-bold quality-desc">
                                                @(Quality switch
                                            {
                                                0 => "Básica",
                                                1 => "Normal",
                                                2 => "Buena",
                                                3 => "Alta",
                                                4 => "Excelente",
                                                _ => "Custom"
                                            })
                                        </div>

                                    </div>
                                </div>

                                <!-- 4a fila: Calidad + Logo -->
                                <div class="qr-row">
                                
                                    <div class="qr-group-simple inputFile">
                                        <label>Logo central</label>
                                        <InputFile OnChange="OnLogoChanged" class="qr-file " />
                                        @* @if (!string.IsNullOrEmpty(logoPreviewUrl))
                                        {
                                            <div style="margin-top:5px;">
                                                <img src="@logoPreviewUrl" alt="Preview logo" style="max-width:70px;max-height:70px;border-radius:12px;border:1px solid #eee;" />
                                            </div>
                                            <div style="font-size:0.9em;color:#666;">@logoFileName</div>
                                        } *@

                                        @if (!string.IsNullOrEmpty(logoError))
                                        {
                                            <div style="color: #d8000c; background: #ffbaba; border-radius: 5px; padding: 6px 12px; margin-top: 6px;">
                                                @logoError
                                            </div>
                                        }
                                    </div>
                                </div>

                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
            <div class="qr-preview-col">
                <div class="qr-svg-container qr-box">
                    @if (isLoading)
                    {
                        <div class="qr-loader-custom">
                            <svg width="48" height="48" viewBox="0 0 40 40">
                                    <rect x="2" y="2" width="12" height="12" rx="3" fill="#27DEF2">
                                    <animate attributeName="opacity" values="0;1;0" dur="1s" repeatCount="indefinite" />
                                </rect>
                                    <rect x="26" y="2" width="12" height="12" rx="3" fill="#27DEF2" opacity="0.7">
                                    <animate attributeName="opacity" values="0;1;0" begin="0.2s" dur="1s" repeatCount="indefinite" />
                                </rect>
                                    <rect x="2" y="26" width="12" height="12" rx="3" fill="#27DEF2" opacity="0.5">
                                    <animate attributeName="opacity" values="0;1;0" begin="0.4s" dur="1s" repeatCount="indefinite" />
                                </rect>
                                    <rect x="26" y="26" width="12" height="12" rx="3" fill="#27DEF2" opacity="0.9">
                                    <animate attributeName="opacity" values="0;1;0" begin="0.6s" dur="1s" repeatCount="indefinite" />
                                </rect>
                            </svg>
                            <div class="loader-text">Generando QR…</div>
                        </div>
                    }
                    @if (showToast)
                    {
                        <div class="toast-over-qr">
                            <span class="toast-icon">✔️</span> ¡QR generado exitosamente!
                        </div>
                    }
                    <CustomQrCode QrOptions="qrOptions" OnSvgGenerated="GuardarQrSvgString" />
                    
                </div>
                <div class="qr-actions mt-3">
                    @* <button class="btn btn-primary mt-3 ms-2" @onclick="DownloadSVG">Descargar SVG</button> *@
                    <div class="qr-actions d-flex flex-wrap gap-2">
                        <button class="btn btn-main" @onclick="GenerateQr" title="Generar" disabled="@(!isInputValid)">
                            <i class="fa fa-qrcode" aria-hidden="true"></i>Generar
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="Limpiar" title="Limpiar campos" disabled="@(!isInputValid)">
                            <i class="fa fa-eraser"></i> Limpiar
                        </button>
                        @* --- Zona de descarga rediseñada --- *@
                        @* <div class="dropdown dropup" disabled="@(!isInputValid)">
                            <button class="main-download-btn dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-display="dynamic" disabled="@(!isInputValid)">
                                <i class="fas fa-download"></i>
                                Descargar
                            </button>
                            <div class="dropdown-menu">
                                <button @onclick="DownloadPNG"><span class="icon">🖼️</span> PNG</button>
                                <button @onclick="DownloadSVG"><span class="icon">🗂️</span> SVG</button>
                                <button @onclick="DownloadPDF"><span class="icon">📄</span> PDF</button>
                            </div>
                        </div> *@
                        @if (qrGenerado && isInputValid)
                        {
                            <div class="dropdown dropup">
                                <button class="main-download-btn dropdown-toggle" type="button" data-bs-toggle="dropdown" data-bs-display="dynamic">
                                    <i class="fas fa-download"></i>
                                    Descargar
                                </button>
                                <div class="dropdown-menu">
                                    <button @onclick="DownloadPNG"><span class="icon">🖼️</span> PNG</button>
                                    <button @onclick="DownloadSVG"><span class="icon">🗂️</span> SVG</button>
                                    <button @onclick="DownloadPDF"><span class="icon">📄</span> PDF</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Ubicación de anuncio -->
        <ins class="adsbygoogle"
             style="display:block; text-align:center;"
             data-ad-client="ca-pub-XXXXXXXXXXXXXXX"
             data-ad-slot="1234567890"
             data-ad-format="auto"
             data-full-width-responsive="true"></ins>
        <script>
             (adsbygoogle = window.adsbygoogle || []).push({});
        </script>
    </div>
</div>

@code {

    [Parameter] public string InitialContent { get; set; } = "";
    [Parameter] public EventCallback<string> OnQrGenerated { get; set; }

    QrCodeOptions qrOptions = new QrCodeOptions();

    List<QrTypeOption> QrTypes = new()
    {
        new() { Type = QrContentType.Link,      Icon = "fas fa-link",         Label = "Enlace",      Tooltip = "Genera un QR para un enlace web." },
        new() { Type = QrContentType.Call,      Icon = "fas fa-phone",        Label = "Llamada",     Tooltip = "Inicia una llamada telefónica." },
        new() { Type = QrContentType.VCard,     Icon = "fas fa-user",         Label = "vCard",       Tooltip = "Agrega contacto a la agenda." },
        new() { Type = QrContentType.SMS,       Icon = "fas fa-comment-alt",  Label = "SMS",         Tooltip = "Envía un mensaje SMS." },
        new() { Type = QrContentType.Email,     Icon = "fas fa-envelope",     Label = "Email",       Tooltip = "Correo electrónico prellenado." },
        new() { Type = QrContentType.Text,      Icon = "fas fa-align-left",   Label = "Texto",       Tooltip = "Comparte un mensaje de texto." },
        new() { Type = QrContentType.WhatsApp,  Icon = "fab fa-whatsapp",     Label = "WhatsApp",    Tooltip = "Abre chat de WhatsApp." },
        new() { Type = QrContentType.WiFi,      Icon = "fas fa-wifi",         Label = "WiFi",        Tooltip = "Conéctate a una red WiFi." },
        new() { Type = QrContentType.PDF,       Icon = "fas fa-file-pdf",     Label = "PDF",         Tooltip = "Descarga un archivo PDF." },
        new() { Type = QrContentType.App,       Icon = "fas fa-mobile-alt",   Label = "App",         Tooltip = "Redirige a una app móvil." },
        new() { Type = QrContentType.Images,    Icon = "fas fa-image",        Label = "Imagen",      Tooltip = "Muestra una imagen." },
        new() { Type = QrContentType.Video,     Icon = "fas fa-video",        Label = "Video",       Tooltip = "Muestra un video." },
        new() { Type = QrContentType.SocialMedia,Icon = "fas fa-hashtag",     Label = "Social",      Tooltip = "Perfil/red social." },
        new() { Type = QrContentType.Event,     Icon = "fas fa-calendar-check",Label = "Evento",     Tooltip = "Evento de calendario (iCal)." },
        new() { Type = QrContentType.Barcode2D, Icon = "fas fa-barcode",      Label = "Código 2D",   Tooltip = "Código de barras (DataMatrix, etc)." },
    };

    private string logoPreviewUrl;
    private string logoFileName;
    private string logoBase64; // para el QR real
    private string logoError;

    public QrContentType SelectedType { get; set; } = QrContentType.Link; // <--- NO string

    private string inputValue = "";
    private string errorMsg = "";
    private bool isInputValid = false;

    int SelectedIndex = 0;
    string CenterFadeClass = "";
    private string QrSvgString;

    // Referencias a los botones, usando el Id único
    ElementReference[] ButtonRefs = new ElementReference[20]; // O ajusta el tamaño a tus opciones

    double GetAngle(int i) => i * (360.0 / QrTypes.Count);

    private void SelectType(QrContentType type)
    {
        if (SelectedType != type)
        {
            SelectedType = type;
            StateHasChanged();
        }
    }

    QrTypeOption SelectedOption => QrTypes.FirstOrDefault(o => o.Type == SelectedType);

    string QrContent { get; set; }

    private void OnQrReady(string qrImageUrl)
    {
        // Puedes hacer algo cuando se genere el QR
    }

    // --- Campos para cada tipo ---
    // ===============================
    // Propiedades para binding y validación
    // ===============================
    // private string linkUrl = "https://midominio.com";
    private string linkUrl;
    public string LinkUrl
    {
        get => linkUrl;
        set
        {
            if (linkUrl != value)
            {
                linkUrl = value;
                ValidateInputs();
            }
        }
    }

    private string textContent;
    public string TextContent
    {
        get => textContent;
        set
        {
            if (textContent != value)
            {
                textContent = value;
                ValidateInputs();
            }
        }
    }

    private string emailTo;
    public string EmailTo
    {
        get => emailTo;
        set
        {
            if (emailTo != value)
            {
                emailTo = value;
                ValidateInputs();
            }
        }
    }

    private string emailSubject;
    public string EmailSubject
    {
        get => emailSubject;
        set
        {
            if (emailSubject != value)
            {
                emailSubject = value;
                ValidateInputs();
            }
        }
    }

    private string emailBody;
    public string EmailBody
    {
        get => emailBody;
        set
        {
            if (emailBody != value)
            {
                emailBody = value;
                ValidateInputs();
            }
        }
    }

    private string phone;
    public string Phone
    {
        get => phone;
        set
        {
            if (phone != value)
            {
                phone = value;
                ValidateInputs();
            }
        }
    }

    private string smsPhone;
    public string SmsPhone
    {
        get => smsPhone;
        set
        {
            if (smsPhone != value)
            {
                smsPhone = value;
                ValidateInputs();
            }
        }
    }

    private string smsMessage;
    public string SmsMessage
    {
        get => smsMessage;
        set
        {
            if (smsMessage != value)
            {
                smsMessage = value;
                ValidateInputs();
            }
        }
    }

    private string vCardFirstName;
    public string VCardFirstName
    {
        get => vCardFirstName;
        set
        {
            if (vCardFirstName != value)
            {
                vCardFirstName = value;
                ValidateInputs();
            }
        }
    }

    private string vCardLastName;
    public string VCardLastName
    {
        get => vCardLastName;
        set
        {
            if (vCardLastName != value)
            {
                vCardLastName = value;
                ValidateInputs();
            }
        }
    }

    private string vCardPhone;
    public string VCardPhone
    {
        get => vCardPhone;
        set
        {
            if (vCardPhone != value)
            {
                vCardPhone = value;
                ValidateInputs();
            }
        }
    }

    private string vCardEmail;
    public string VCardEmail
    {
        get => vCardEmail;
        set
        {
            if (vCardEmail != value)
            {
                vCardEmail = value;
                ValidateInputs();
            }
        }
    }

    private string vCardCompany;
    public string VCardCompany
    {
        get => vCardCompany;
        set
        {
            if (vCardCompany != value)
            {
                vCardCompany = value;
                ValidateInputs();
            }
        }
    }

    private string vCardJob;
    public string VCardJob
    {
        get => vCardJob;
        set
        {
            if (vCardJob != value)
            {
                vCardJob = value;
                ValidateInputs();
            }
        }
    }

    private string vCardAddress;
    public string VCardAddress
    {
        get => vCardAddress;
        set
        {
            if (vCardAddress != value)
            {
                vCardAddress = value;
                ValidateInputs();
            }
        }
    }

    private string whatsAppPhone;
    public string WhatsAppPhone
    {
        get => whatsAppPhone;
        set
        {
            if (whatsAppPhone != value)
            {
                whatsAppPhone = value;
                ValidateInputs();
            }
        }
    }

    private string whatsAppMessage;
    public string WhatsAppMessage
    {
        get => whatsAppMessage;
        set
        {
            if (whatsAppMessage != value)
            {
                whatsAppMessage = value;
                ValidateInputs();
            }
        }
    }

    private string wiFiSSID;
    public string WiFiSSID
    {
        get => wiFiSSID;
        set
        {
            if (wiFiSSID != value)
            {
                wiFiSSID = value;
                ValidateInputs();
            }
        }
    }

    private string wiFiPassword;
    public string WiFiPassword
    {
        get => wiFiPassword;
        set
        {
            if (wiFiPassword != value)
            {
                wiFiPassword = value;
                ValidateInputs();
            }
        }
    }

    private string wiFiEncryption = "WPA";
    public string WiFiEncryption
    {
        get => wiFiEncryption;
        set
        {
            if (wiFiEncryption != value)
            {
                wiFiEncryption = value;
                ValidateInputs();
            }
        }
    }

    private string pdfUrl;
    public string PdfUrl
    {
        get => pdfUrl;
        set
        {
            if (pdfUrl != value)
            {
                pdfUrl = value;
                ValidateInputs();
            }
        }
    }

    private string appUrl;
    public string AppUrl
    {
        get => appUrl;
        set
        {
            if (appUrl != value)
            {
                appUrl = value;
                ValidateInputs();
            }
        }
    }

    private string imageUrl;
    public string ImageUrl
    {
        get => imageUrl;
        set
        {
            if (imageUrl != value)
            {
                imageUrl = value;
                ValidateInputs();
            }
        }
    }

    private string videoUrl;
    public string VideoUrl
    {
        get => videoUrl;
        set
        {
            if (videoUrl != value)
            {
                videoUrl = value;
                ValidateInputs();
            }
        }
    }

    private string socialUrl;
    public string SocialUrl
    {
        get => socialUrl;
        set
        {
            if (socialUrl != value)
            {
                socialUrl = value;
                ValidateInputs();
            }
        }
    }

    private string eventTitle;
    public string EventTitle
    {
        get => eventTitle;
        set
        {
            if (eventTitle != value)
            {
                eventTitle = value;
                ValidateInputs();
            }
        }
    }

    private string eventLocation;
    public string EventLocation
    {
        get => eventLocation;
        set
        {
            if (eventLocation != value)
            {
                eventLocation = value;
                ValidateInputs();
            }
        }
    }

    private string eventStart;
    public string EventStart
    {
        get => eventStart;
        set
        {
            if (eventStart != value)
            {
                eventStart = value;
                ValidateInputs();
            }
        }
    }

    private string eventEnd;
    public string EventEnd
    {
        get => eventEnd;
        set
        {
            if (eventEnd != value)
            {
                eventEnd = value;
                ValidateInputs();
            }
        }
    }

    private string barcode2DContent;
    public string Barcode2DContent
    {
        get => barcode2DContent;
        set
        {
            if (barcode2DContent != value)
            {
                barcode2DContent = value;
                ValidateInputs();
            }
        }
    }

    private string ExpandedSection = "Frame"; // o "Center"
    private bool ShowTooltip { get; set; }
    private bool showAllTypes = false;
    private int visibleTypesCount = 10; // Ajusta según tu diseño
    private int screenWidth;

    // Opcional: Método para mostrar un ícono por tipo (puedes cambiar por <i class="fa ..."> si usas FontAwesome)
    string GetTypeIcon(QrContentType type) => type switch
    {
        QrContentType.Link => "<i class='fas fa-link'></i>",
        QrContentType.Text => "<i class='fas fa-font'></i>",
        QrContentType.Email => "<i class='fas fa-envelope'></i>",
        QrContentType.Call => "<i class='fas fa-phone'></i>",
        QrContentType.SMS => "<i class='fas fa-sms'></i>",
        QrContentType.VCard => "<i class='fas fa-id-card'></i>",
        QrContentType.WhatsApp => "<i class='fab fa-whatsapp'></i>",
        QrContentType.WiFi => "<i class='fas fa-wifi'></i>",
        QrContentType.PDF => "<i class='fas fa-file-pdf'></i>",
        QrContentType.App => "<i class='fas fa-mobile-alt'></i>",
        QrContentType.Images => "<i class='fas fa-image'></i>",
        QrContentType.Video => "<i class='fas fa-video'></i>",
        QrContentType.SocialMedia => "<i class='fas fa-users'></i>",
        QrContentType.Event => "<i class='fas fa-calendar-alt'></i>",
        QrContentType.Barcode2D => "<i class='fas fa-barcode'></i>",
        _ => "<i class='fas fa-qrcode'></i>"
    };

    private void Limpiar()
    {
        LinkUrl = TextContent = EmailTo = EmailSubject = EmailBody = Phone = SmsPhone = SmsMessage =
        VCardFirstName = VCardLastName = VCardPhone = VCardEmail = VCardCompany = VCardJob = VCardAddress =
        WhatsAppPhone = WhatsAppMessage = WiFiSSID = WiFiPassword = PdfUrl = AppUrl = ImageUrl = VideoUrl =
        SocialUrl = EventTitle = EventLocation = EventStart = EventEnd = Barcode2DContent = "";
        WiFiEncryption = "WPA";

        errorMsg = "";
        isInputValid = false;
        qrGenerado = false;
        // ...resto de tu lógica para limpiar campos...
        StateHasChanged();
    }

    // Métodos auxiliares para formatos especiales
    private string BuildVCard()
    {
        return
        $@"BEGIN:VCARD
        VERSION:3.0
        N:{VCardLastName};{VCardFirstName}
        FN:{VCardFirstName} {VCardLastName}
        ORG:{VCardCompany}
        TITLE:{VCardJob}
        TEL:{VCardPhone}
        EMAIL:{VCardEmail}
        ADR:{VCardAddress}
        END:VCARD";
    }

    private string BuildEvent()
    {
        // Evento en formato iCal básico (ajustar para tu caso real)
        return
        $@"BEGIN:VEVENT
        SUMMARY:{EventTitle}
        LOCATION:{EventLocation}
        DTSTART:{EventStart}
        DTEND:{EventEnd}
        END:VEVENT";
    }

    /*Personalizacion*/
    private bool CenterIsFixed =>
    qrOptions != null &&
    FrameRequiresFixedCenter.TryGetValue(qrOptions.EyeFrameShape, out var fixedCenter) &&
    fixedCenter;

    private readonly List<EyeCenterShape> AllEyeCenterShapes = Enum.GetValues<EyeCenterShape>().ToList();


    // Variables para mostrar QR
    public string Content { get; set; } = "https://midominio.com";
    public int Size => CalcularTamañoPorVentana(windowWidth);
    private int Quality { get; set; } = 2; // Valor inicial por defecto

    private string expandedSection = ""; // Puede ser "frame", "center", o ""
    private int windowWidth; // Default inicial

    // Campos privados de backing
    private string tempEyeFrameShapeStr = "Square";
    private string tempEyeCenterShapeStr = "Square";

    // Enum en uso
    public EyeFrameShape TempEyeFrameShape { get; set; } = EyeFrameShape.Square;
    public EyeCenterShape TempEyeCenterShape { get; set; } = EyeCenterShape.Square;
    public List<EyeCenterShape> AllowedCenters { get; set; } = new List<EyeCenterShape>();

    private string tipoQrSeleccionado = "Link";

    public string TempEyeFrameShapeStr
    {
        get => tempEyeFrameShapeStr;
        set
        {
            if (tempEyeFrameShapeStr != value)
            {
                tempEyeFrameShapeStr = value;
                TempEyeFrameShape = Enum.Parse<EyeFrameShape>(value);
                AllowedCenters = GetAllowedCenters(TempEyeFrameShape);

                // Si Leaf o Diamond, fuerza el centro a ser igual al marco
                if (TempEyeFrameShape == EyeFrameShape.Leaf || TempEyeFrameShape == EyeFrameShape.Diamond || TempEyeFrameShape == EyeFrameShape.CornerRect
                    || TempEyeFrameShape == EyeFrameShape.TwoCornerRect || TempEyeFrameShape == EyeFrameShape.CornerRectRadio || TempEyeFrameShape == EyeFrameShape.TwoCornerRectIn)
                {
                    TempEyeCenterShape = (EyeCenterShape)Enum.Parse(typeof(EyeCenterShape), TempEyeFrameShape.ToString());
                    TempEyeCenterShapeStr = TempEyeCenterShape.ToString();
                }
                // Si la forma actual no está permitida, cambia a la primera
                else if (!AllowedCenters.Contains(TempEyeCenterShape))
                {
                    TempEyeCenterShape = AllowedCenters[0];
                    TempEyeCenterShapeStr = TempEyeCenterShape.ToString();
                }

                StateHasChanged();
            }
        }
    }

    public string TempEyeCenterShapeStr
    {
        get => tempEyeCenterShapeStr;
        set
        {
            if (tempEyeCenterShapeStr != value)
            {
                tempEyeCenterShapeStr = value;
                TempEyeCenterShape = Enum.Parse<EyeCenterShape>(value);
            }
        }
    }

    private bool showToast = false;
    private System.Threading.Timer? toastTimer;
    private bool showToastColor = false;
    private string toastMessage;

    private bool isLoading = false;

    private int sliderValue = 2;

    bool isSliderActive = false;

    private bool qrGenerado = false;

    protected override void OnInitialized()
    {
        QrContent = InitialContent;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            windowWidth = await JS.InvokeAsync<int>("getWindowWidth");
            qrOptions.Size = CalcularTamañoPorVentana(windowWidth);
            await JS.InvokeVoidAsync("subscribeResize", DotNetObjectReference.Create(this));
            UpdateVisibleTypesCount();
            StateHasChanged();
        }
    }

    private int CalcularTamañoPorVentana(int width)
    {
        if (width < 350) return 200;
        if (width < 500) return 200;
        if (width < 700) return 300;
        if (width < 900) return 250;
        if (width < 1024) return 300;
        if (width < 1200) return 300;
        if (width < 1500) return 375;
        if (width < 1700) return 400;
        if (width < 2000) return 500;
        return 550;
    }

    private async Task GenerateQr()
    {
        qrGenerado = false;

        var colorM = qrOptions.ModuleColor;     // Ejemplo: "#000000"
        var colorF = qrOptions.BgColor; // Ejemplo: "#FFFFFF"

        if (!Utils.ColorUtils.IsContrastAccessible(colorM, colorF))
        {
            showToastColor = true;
            toastMessage = "El contraste entre el color de fondo y el código es muy bajo.";
            return;
        }

        isLoading = true;
        StateHasChanged();
        errorMsg = "";
        isInputValid = false;

        try
        {
            // --- Arma el contenido principal para el QR ---
            switch (SelectedType)
            {
                case QrContentType.Link:
                    qrOptions.Content = LinkUrl;
                    break;
                case QrContentType.Text:
                    qrOptions.Content = TextContent;
                    break;
                case QrContentType.Email:
                    qrOptions.Content = $"mailto:{EmailTo}?subject={Uri.EscapeDataString(EmailSubject)}&body={Uri.EscapeDataString(EmailBody)}";
                    break;
                case QrContentType.Call:
                    qrOptions.Content = $"tel:{Phone}";
                    break;
                case QrContentType.SMS:
                    qrOptions.Content = $"sms:{SmsPhone}?body={Uri.EscapeDataString(SmsMessage)}";
                    break;
                case QrContentType.VCard:
                    qrOptions.Content = BuildVCard();
                    break;
                case QrContentType.WhatsApp:
                    var msg = string.IsNullOrWhiteSpace(WhatsAppMessage) ? "" : $"?text={Uri.EscapeDataString(WhatsAppMessage)}";
                    qrOptions.Content = $"https://wa.me/{WhatsAppPhone}{msg}";
                    break;
                case QrContentType.WiFi:
                    qrOptions.Content = $"WIFI:T:{WiFiEncryption};S:{WiFiSSID};P:{WiFiPassword};;";
                    break;
                case QrContentType.PDF:
                    qrOptions.Content = PdfUrl;
                    break;
                case QrContentType.App:
                    qrOptions.Content = AppUrl;
                    break;
                case QrContentType.Images:
                    qrOptions.Content = ImageUrl;
                    break;
                case QrContentType.Video:
                    qrOptions.Content = VideoUrl;
                    break;
                case QrContentType.SocialMedia:
                    qrOptions.Content = SocialUrl;
                    break;
                case QrContentType.Event:
                    qrOptions.Content = BuildEvent();
                    break;
                case QrContentType.Barcode2D:
                    qrOptions.Content = Barcode2DContent;
                    break;
                default:
                    qrOptions.Content = Content;
                    break;
            }


            // --- Aquí puedes actualizar cualquier otro campo de qrOptions si fuera necesario ---
            qrOptions.ModuleShape = Enum.Parse<ModuleShape>(qrOptions.ModuleShape.ToString());
            qrOptions.ModuleColor = qrOptions.ModuleColor;
            qrOptions.EyeFrameShape = Enum.Parse<EyeFrameShape>(qrOptions.EyeFrameShape.ToString());
            qrOptions.EyeFrameColor = qrOptions.EyeFrameColor;
            qrOptions.EyeCenterShape = Enum.Parse<EyeCenterShape>(qrOptions.EyeCenterShape.ToString());
            qrOptions.EyeCenterColor = qrOptions.EyeCenterColor;
            qrOptions.BgColor = qrOptions.BgColor;
            qrOptions.CorrectionLevel = qrOptions.CorrectionLevel;
            qrOptions.Size = qrOptions.Size;
            qrOptions.Quality = qrOptions.Quality;
            qrOptions.LogoBase64 = qrOptions.LogoBase64;

            if (!string.IsNullOrWhiteSpace(QrSvgString))
            {
                isInputValid = true;
                qrGenerado = true;
            }

            // Esto fuerza la actualización del QR generado
            //StateHasChanged();
            showToastColor = false;
            await Task.Delay(1500); // Simulación, reemplaza por tu lógica real
            ShowToast();
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public async Task OnLogoChanged(InputFileChangeEventArgs e)
    {
        logoError = "";
        logoPreviewUrl = "";
        logoBase64 = "";
        logoFileName = "";

        IBrowserFile file = e.File;
        logoFileName = file.Name;

        // Validar tipo

        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            logoError = "El logo debe ser PNG o JPG.";
            return;
        }

        // Validar tamaño(ej: 1MB máximo)
        const long maxSize = 10240 * 10240;
        if (file.Size > maxSize)
        {
            logoError = "El logo debe pesar menos de 10 MB.";
            return;
        }

        try
        {

            // Lee el archivo en memoria como stream
            using var stream = file.OpenReadStream(maxAllowedSize: 10240 * 10240 * 4); // 4 MB max
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            byte[] imageBytes = ms.ToArray();

            // Construye el string base64 para PNG
            qrOptions.LogoBase64 = "data:image/png;base64," + Convert.ToBase64String(imageBytes);
            // Esto es para el preview
            logoPreviewUrl = qrOptions.LogoBase64;
        }
        catch (Exception ex)
        { 
            logoError = "No se pudo leer la imagen, intenta con otro archivo.";
            throw ex;
        }
    }

    // Cuando el usuario cambia el marco del ojo
    private void OnFrameShapeChanged(ChangeEventArgs e)
    {
        // Si usas string, convierte a Enum
        TempEyeFrameShapeStr = e.Value.ToString();
        TempEyeFrameShape = Enum.Parse<EyeFrameShape>(TempEyeFrameShapeStr);
        AllowedCenters = GetAllowedCenters(TempEyeFrameShape);

        // Para Leaf o Diamond: fuerza a que la forma del ojo sea igual que el marco (por defecto)
        if (TempEyeFrameShape == EyeFrameShape.Leaf || TempEyeFrameShape == EyeFrameShape.Diamond || TempEyeFrameShape == EyeFrameShape.CornerRect)
        {
            TempEyeCenterShape = (EyeCenterShape)Enum.Parse(typeof(EyeCenterShape), TempEyeFrameShape.ToString());
            TempEyeCenterShapeStr = TempEyeCenterShape.ToString();
        }
        else if (!AllowedCenters.Contains(TempEyeCenterShape))
        {
            TempEyeCenterShape = AllowedCenters[0];
            TempEyeCenterShapeStr = TempEyeCenterShape.ToString();
        }

        StateHasChanged();
    }

    public List<EyeCenterShape> GetAllowedCenters(EyeFrameShape marco)
    {
        // Si es Leaf o Diamond: solo ellos + Circle
        if (marco == EyeFrameShape.Leaf)
            return new List<EyeCenterShape> { EyeCenterShape.Leaf };
        if (marco == EyeFrameShape.Diamond)
            return new List<EyeCenterShape> { EyeCenterShape.Diamond };
        // Para el resto, todas las opciones
        return Enum.GetValues(typeof(EyeCenterShape)).Cast<EyeCenterShape>().ToList();
    }

    private void OnCenterShapeChanged()
    {
        TempEyeCenterShape = Enum.Parse<EyeCenterShape>(TempEyeCenterShapeStr);
    }

    private void GuardarQrSvgString(string svg)
    {
        QrSvgString = svg;
    }

    private async Task DownloadSVG()
    {
        if (string.IsNullOrWhiteSpace(QrSvgString))
        {
            // Opcional: muestra mensaje de error al usuario
            return;
        }

        /*Sin librerias externas*/
        await JS.InvokeVoidAsync("downloadSvgNative", QrSvgString, "codigoQR.svg");
    }

    // PNG (usa canvg en JS)
    private async Task DownloadPNG()
    {
        if (string.IsNullOrWhiteSpace(QrSvgString))
            return;

        /*Sin libreria exnterna*/
        int size = GetQrSize();
        await JS.InvokeVoidAsync("svgStringToPng", QrSvgString, size, size, "codigoQR.png");
    }

    // PDF (usa jsPDF en JS)
    private async Task DownloadPDF()
    {
        /*sin librerias externas*/
        int size = GetQrSize();
        await JS.InvokeVoidAsync("exportQrAsPdf", QrSvgString, size, size, "codigoQR.pdf");
    }

    private void OnShapeChanged(string newValue)
    {
        qrOptions.ModuleShape = Enum.Parse<ModuleShape>(newValue);
    }

    private void OnColorShapeChanged(string newValue)
    {
        var colorM = newValue;     // Ejemplo: "#000000"
        var colorF = qrOptions.BgColor; // Ejemplo: "#FFFFFF"
        if (!Utils.ColorUtils.IsContrastAccessible(colorM, colorF))
        {
            showToastColor = true;
            toastMessage = "El contraste entre el color de fondo y el código es muy bajo.";
            return;
        }
        else
        {
            qrOptions.ModuleColor = newValue;
            toastMessage = string.Empty;
            showToastColor = false;
        }
    }

    private void OnFrameChanged(string newValue)
    {
        //qrOptions.EyeFrameShape = Enum.Parse<EyeFrameShape>(newValue);

        qrOptions.EyeFrameShape = Enum.Parse<EyeFrameShape>(newValue);

        // Validar centro
        var allowed = GetAllowedCenters(qrOptions.EyeFrameShape);
        if (!allowed.Contains(qrOptions.EyeCenterShape))
        {
            qrOptions.EyeCenterShape = allowed.First();
        }

        AllowedCenters = allowed;
    }

    private void OnFrameColorChanged(string newValue)
    {
        qrOptions.EyeFrameColor = newValue;
    }

    private void OnCenterEyeChanged(string newValue)
    {
        qrOptions.EyeCenterShape = Enum.Parse<EyeCenterShape>(newValue);
    }

    private void OnCenterEyeColorChanged(string newValue)
    {
        qrOptions.EyeCenterColor = newValue;
    }

    // Convierte el nivel de calidad a tamaño o dpi sugerido
    private int GetQrSize()
    {
        // Puedes definir diferentes resoluciones para cada calidad
        return Quality switch
        {
            0 => 300,  // Básica
            1 => 450,  // Normal
            2 => 750,  // Buena
            3 => 1100, // Alta
            4 => 2048, // Excelente
            _ => 450,
        };
    }

    private static TEnum TryParseEnum<TEnum>(string value, TEnum defaultValue) where TEnum : struct
    {
        if (!string.IsNullOrEmpty(value) && Enum.TryParse(value, true, out TEnum result))
            return result;
        return defaultValue;
    }

    private void ShowToast()
    {
        showToast = true;
        toastTimer?.Dispose();
        toastTimer = new System.Threading.Timer(_ =>
        {
            showToast = false;
            InvokeAsync(StateHasChanged);
        }, null, 2000, System.Threading.Timeout.Infinite);
        StateHasChanged();
    }

    private void IncrementQuality()
    {
        if (Quality < 4)
            Quality++;
    }

    private void DecrementQuality()
    {
        if (Quality > 0)
            Quality--;
    }

    private string InputCss(QrContentType type)
    => (!isInputValid && SelectedType == type) ? "input-error" : "";

    private RenderFragment ErrorMsg(QrContentType type) => builder =>
    {
        if (!isInputValid && SelectedType == type && !string.IsNullOrEmpty(errorMsg))
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "error-msg");
            builder.AddContent(2, errorMsg);
            builder.CloseElement();
        }
    };

    private void ValidateInputs()
    {
        errorMsg = "";
        isInputValid = false;
        qrGenerado = false;

        switch (SelectedType)
        {
            case QrContentType.Link:
                isInputValid = QrValidators.IsValidUrl(LinkUrl);
                errorMsg = isInputValid ? "" : "URL no válida";
                break;

            case QrContentType.Text:
                isInputValid = !string.IsNullOrWhiteSpace(TextContent);
                errorMsg = isInputValid ? "" : "El texto no puede estar vacío";
                break;

            case QrContentType.Email:
                isInputValid = QrValidators.IsValidEmail(EmailTo);
                if (!isInputValid)
                    errorMsg = "Email no válido";
                else if (string.IsNullOrWhiteSpace(EmailSubject) && string.IsNullOrWhiteSpace(EmailBody))
                {
                    isInputValid = false;
                    errorMsg = "Debes añadir asunto o mensaje";
                }
                break;

            case QrContentType.Call:
                isInputValid = QrValidators.IsValidPhone(Phone);
                errorMsg = isInputValid ? "" : "Teléfono no válido";
                break;

            case QrContentType.SMS:
                isInputValid = QrValidators.IsValidPhone(SmsPhone) && !string.IsNullOrWhiteSpace(SmsMessage);
                errorMsg = QrValidators.IsValidPhone(SmsPhone) ? (string.IsNullOrWhiteSpace(SmsMessage) ? "Mensaje requerido" : "") : "Teléfono no válido";
                break;

            case QrContentType.VCard:
                isInputValid = !string.IsNullOrWhiteSpace(VCardFirstName)
                    && !string.IsNullOrWhiteSpace(VCardFirstName)
                    && QrValidators.IsValidPhone(VCardPhone)
                    && QrValidators.IsValidEmail(VCardEmail);
                errorMsg = isInputValid ? "" : "Nombre, apellido, teléfono y correo son obligatorios y deben ser válidos";
                break;

            case QrContentType.WhatsApp:
                isInputValid = QrValidators.IsValidPhone(WhatsAppPhone);
                errorMsg = isInputValid ? "" : "Teléfono no válido";
                break;

            case QrContentType.WiFi:
                isInputValid = !string.IsNullOrWhiteSpace(WiFiSSID)
                    && (!string.IsNullOrWhiteSpace(WiFiPassword) || WiFiEncryption == "nopass");
                errorMsg = isInputValid ? "" : "SSID y contraseña requeridos (o pon 'nopass')";
                break;

            case QrContentType.PDF:
                isInputValid = QrValidators.IsValidUrl(PdfUrl);
                errorMsg = isInputValid ? "" : "URL del PDF no válida";
                break;

            case QrContentType.App:
                isInputValid = QrValidators.IsValidUrl(AppUrl);
                errorMsg = isInputValid ? "" : "URL de la app no válida";
                break;

            case QrContentType.Images:
                isInputValid = QrValidators.IsValidUrl(ImageUrl);
                errorMsg = isInputValid ? "" : "URL de la imagen no válida";
                break;

            case QrContentType.Video:
                isInputValid = QrValidators.IsValidUrl(VideoUrl);
                errorMsg = isInputValid ? "" : "URL del video no válida";
                break;

            case QrContentType.SocialMedia:
                isInputValid = QrValidators.IsValidUrl(SocialUrl);
                errorMsg = isInputValid ? "" : "URL no válida";
                break;
            case QrContentType.Event:
                isInputValid = !string.IsNullOrWhiteSpace(EventTitle)
                    && !string.IsNullOrWhiteSpace(EventLocation)
                    && !string.IsNullOrWhiteSpace(EventStart)
                    && !string.IsNullOrWhiteSpace(EventEnd);
                errorMsg = isInputValid ? "" : "Todos los campos del evento son obligatorios";
                break;

            case QrContentType.Barcode2D:
                isInputValid = !string.IsNullOrWhiteSpace(Barcode2DContent);
                errorMsg = isInputValid ? "" : "Contenido requerido";
                break;
        }

    }

    private void ToggleSidebarTypes()
    {
        showAllTypes = !showAllTypes;
        ShowTooltip = false;
    }

    [JSInvokable]
    public void UpdateScreenWidth(int width)
    {
        windowWidth = width;
        UpdateVisibleTypesCount();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateVisibleTypesCount()
    {
        if (windowWidth < 600)
            visibleTypesCount = 4;
        else if (windowWidth < 900)
            visibleTypesCount = 5;
        else if (windowWidth < 1200)
            visibleTypesCount = 7;
        else if (windowWidth < 1600)
            visibleTypesCount = 8;
        else
            visibleTypesCount = 10;
    }

    private void ToggleSection(string section)
    {
        ExpandedSection = ExpandedSection == section ? null : section;
    }


    private readonly Dictionary<EyeFrameShape, bool> FrameRequiresFixedCenter = new()
    {
        { EyeFrameShape.Leaf, true },
        { EyeFrameShape.Diamond, true },
        { EyeFrameShape.CircleInSquare, false },
        { EyeFrameShape.CornerRoundOut, false },
        { EyeFrameShape.CornerRect, false },
        { EyeFrameShape.TwoCornerRect, false },
        { EyeFrameShape.CornerRectRadio, false },
        { EyeFrameShape.TwoCornerRectIn, false },
    };

    private bool isSidebarOpen = false;

    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
    }

    // private List<EyeCenterShape> GetAllowedCenters()
    // {
    //     return CenterIsFixed ? new List<EyeCenterShape> { qrOptions.EyeCenterShape } : AllEyeCenterShapes;
    // }

}