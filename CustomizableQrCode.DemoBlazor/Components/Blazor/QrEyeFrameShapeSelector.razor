@using CustomizableQrCode.Models

<div class="combo-visual-group">
    <label class="combo-title">Marco - Ojo</label>
    <div class="combo-gallery">
        @foreach (var shape in (IsExpanded ? EyeFrameShapes : MainShapes))
        {
            <button type="button"
                    class="combo-option @(SelectedShape == shape.Id ? "selected" : "")"
                    @onclick="() => SelectShape(shape.Id)"
                    title="@shape.Name">
                @shape.Svg
            </button>
        }
        @if (OtherShapes.Any())
        {
            <div class="combo-expand-container">
                <button type="button"
                        class="combo-expand more-btn"
                        @onclick="ToggleSection"
                        @onmouseover="() => ShowTooltip = true"
                        @onmouseout="() => ShowTooltip = false"
                        aria-label="@(showAllShapes ? "Ver menos opciones" : "Ver más opciones")">
                    @(IsExpanded ? "-" : "+")
                </button>
                @if (ShowTooltip)
                {
                    <div class="tooltip-combo-expand">
                        @(showAllShapes ? "Ver menos opciones" : "Ver más opciones de formas")
                    </div>
                }
            </div>
        }
        <input type="color"
               value="SelectedColor"
               class="qr-color"
               @oninput="OnColorChanged" />
    </div>
</div>

@code {
    [Parameter] public string SelectedShape { get; set; }
    [Parameter] public EventCallback<string> SelectedShapeChanged { get; set; }
    [Parameter] public string SelectedColor { get; set; }
    [Parameter] public EventCallback<string> SelectedColorChanged { get; set; }
    [Parameter] public bool IsExpanded { get; set; }
    [Parameter] public EventCallback ToggleRequested { get; set; }

    // Para colapsar/expandir
    private bool showAllShapes = false;
    private int maxVisible = 5; // Puedes cambiar cuántos mostrar por default

    private List<EyeFrameShapeOption> MainShapes => EyeFrameShapes.Take(maxVisible).ToList();
    private List<EyeFrameShapeOption> OtherShapes => EyeFrameShapes.Skip(maxVisible).ToList();
    private bool ShowTooltip { get; set; }
    private void ToggleSection() => ToggleRequested.InvokeAsync();

    public class EyeFrameShapeOption
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public MarkupString Svg { get; set; }
    }

    private List<EyeFrameShapeOption> EyeFrameShapes = new()
    {
        new EyeFrameShapeOption { Id = "Square", Name = "Square", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><rect x='4' y='4' width='24' height='24' fill='none' stroke='black' stroke-width='3' rx='2'/></svg>" },
        new EyeFrameShapeOption { Id = "Rounded", Name = "Rounded", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><rect x='4' y='4' width='24' height='24' fill='none' stroke='black' stroke-width='3' rx='8'/></svg>" },
        new EyeFrameShapeOption { Id = "Circle", Name = "Circle", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><circle cx='16' cy='16' r='12' fill='none' stroke='black' stroke-width='3'/></svg>" },
        // new EyeFrameShapeOption { Id = "Leaf", Name = "Leaf", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><path d='M16 6 Q28 16 16 26 Q4 16 16 6 Z' fill='none' stroke='black' stroke-width='3'/></svg>" },
        new EyeFrameShapeOption { Id = "Diamond", Name = "Diamond", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><polygon points='16,4 28,16 16,28 4,16' fill='none' stroke='black' stroke-width='3'/></svg>" },
        //new EyeFrameShapeOption { Id = "Double", Name = "Double", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><rect x='7' y='7' width='18' height='18' fill='none' stroke='black' stroke-width='2.5'/><rect x='11' y='11' width='10' height='10' fill='none' stroke='black' stroke-width='2'/></svg>" },

        // Irregular shapes: Adaptados para que el trazo principal quede dentro del área central
        new EyeFrameShapeOption { Id = "IrregularLeft", Name = "Irregular Left", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><path d='M10,8 Q8,8 8,10 L8,28 L28,28 L28,8 L10,8' stroke='black' stroke-width='3' fill='none'/></svg>" },
        new EyeFrameShapeOption { Id = "IrregularRight", Name = "Irregular Right", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><path d='M6,6 H22 Q26,6 26,10 V26 H6 V6 Z' stroke='black' stroke-width='3' fill='none'/></svg>" },
        new EyeFrameShapeOption { Id = "IrregularTop", Name = "Irregular Top", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><path d='M6,6 H26 V26 H12 Q6,26 6,20 V6 Z' stroke='black' stroke-width='3' fill='none'/></svg>" },
        new EyeFrameShapeOption { Id = "IrregularBottom", Name = "Irregular Bottom", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><path d='M6,6 H26 V20 Q26,26 20,26 H6 V6 Z' stroke='black' stroke-width='3' fill='none'/></svg>" },

        // Wavy
        //new EyeFrameShapeOption { Id = "Wavy", Name = "Wavy", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28' fill='none'><path d='M3,5 Q7,1 11,5 Q14,0 18,5 Q21,1 25,5 Q29,3 28,8 Q32,10 28,14 Q32,18 28,20 Q31,28 24,27 Q21,31 18,27 Q13,32 9,28 Q5,32 3,27 Q0,28 2,23 Q-1,19 2,17 Q-1,12 4,10 Q0,7 3,5 Z' fill='black'/></svg>" },

        // Dotted (Bordes de círculos, simplificado para 32x32)
        // new EyeFrameShapeOption { Id = "Dotted", Name = "Dotted", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28' fill='none'>
        //     <circle cx='8' cy='4' r='2' fill='black'/>
        //     <circle cx='16' cy='4' r='2' fill='black'/>
        //     <circle cx='24' cy='4' r='2' fill='black'/>
        //     <circle cx='8' cy='28' r='2' fill='black'/>
        //     <circle cx='16' cy='28' r='2' fill='black'/>
        //     <circle cx='24' cy='28' r='2' fill='black'/>
        //     <circle cx='4' cy='8' r='2' fill='black'/>
        //     <circle cx='4' cy='16' r='2' fill='black'/>
        //     <circle cx='4' cy='24' r='2' fill='black'/>
        //     <circle cx='28' cy='8' r='2' fill='black'/>
        //     <circle cx='28' cy='16' r='2' fill='black'/>
        //     <circle cx='28' cy='24' r='2' fill='black'/>
        // </svg>" },

        // Circle in Square
        new EyeFrameShapeOption { Id = "CircleInSquare", Name = "Circle In Square", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><rect x='4' y='4' width='24' height='24' rx='8' fill='black'/><circle cx='16' cy='16' r='10' fill='white'/></svg>" },

        // Pixelated (bordes en bloques)
        // new EyeFrameShapeOption { Id = "Pixelated", Name = "Pixelated", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28' fill='none'>
        //   <rect x='3' y='3' width='5' height='5' fill='black'/>
        //   <rect x='9' y='3' width='5' height='5' fill='black'/>
        //   <rect x='15' y='3' width='5' height='5' fill='black'/>
        //   <rect x='21' y='3' width='5' height='5' fill='black'/>
        //   <rect x='3' y='24' width='5' height='5' fill='black'/>
        //   <rect x='9' y='24' width='5' height='5' fill='black'/>
        //   <rect x='15' y='24' width='5' height='5' fill='black'/>
        //   <rect x='21' y='24' width='5' height='5' fill='black'/>
        //   <rect x='3' y='9' width='5' height='5' fill='black'/>
        //   <rect x='3' y='15' width='5' height='5' fill='black'/>
        //   <rect x='3' y='21' width='5' height='2' fill='black'/>
        //   <rect x='24' y='9' width='5' height='5' fill='black'/>
        //   <rect x='24' y='15' width='5' height='5' fill='black'/>
        //   <rect x='24' y='21' width='5' height='2' fill='black'/>
        // </svg>" },

        // new EyeFrameShapeOption { Id = "RoundedAll", Name = "Rounded All", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><rect x='4' y='4' width='24' height='24' fill='none' stroke='black' stroke-width='3' rx='12'/></svg>" },

        // CornerRect (3 esquinas redondeadas, 1 recta)
        new EyeFrameShapeOption { Id = "CornerRect", Name = "Corner Rect", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><path d='M7,4 H25 Q28,4 28,7 V25 L28,28 H7 Q4,28 4,25 V7 Q4,4 7,4 Z' stroke='black' stroke-width='3' fill='none'/></svg>" },

        // TwoCornerRect (2 esquinas opuestas redondeadas)
        new EyeFrameShapeOption { Id = "TwoCornerRect", Name = "Two Corner Rect", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><path d='M5,5 H25 Q29,5 29,9 V25 H9 Q5,25 5,21 V5 Z' stroke='black' stroke-width='3' fill='none'/></svg>" },

        // CornerRectRadio (3 esquinas bien redondas, 1 recta)
        new EyeFrameShapeOption { Id = "CornerRectRadio", Name = "Corner Rect Radio", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><path d='M5,16 Q5,6 16,5 Q27,6 27,16 L27,27 L16,27 Q5,27 5,16 Z' fill='black'/><circle cx='16' cy='16' r='9' fill='white'/></svg>" },

        // TwoCornerRectIn (cuadrado con dos esquinas redondeadas, recortes cóncavos)
        new EyeFrameShapeOption { Id = "TwoCornerRectIn", Name = "Two Corner Rect In", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28' fill='none'>
        <rect x='4' y='4' width='24' height='24' rx='7' fill='black'/>
        <circle cx='28' cy='6' r='6' fill='white'/>
        <circle cx='6' cy='28' r='6' fill='white'/>
        <rect x='9' y='9' width='14' height='14' fill='white'/>
    </svg>" },
        // CornerRoundOut (3 esquinas bien redondas, 1 recta)
        new EyeFrameShapeOption { Id = "CornerRoundOut", Name = "Corner Round Out", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><path d='M5,5 Q5,6 16,5 Q27,6 27,16 L27,27 L16,27 Q5,27 5,16 Z' fill='black'/><circle cx='16' cy='16' r='9' fill='white'/></svg>" },

        // CornerRoundOutSP (versión especial, círculo blanco central más pequeño)
        new EyeFrameShapeOption { Id = "CornerRoundOutSP", Name = "Corner Round Out SP", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><path d='M5,5 Q5,6 16,5 Q27,6 27,16 L27,27 L16,27 Q5,27 5,16 Z' fill='black'/><path d='M9,16 Q10,7 16,7 Q23,8 23,17 L23,25 L16,25 Q8,24 9,17 Z' fill='white'/></svg>" },
    };


    private async Task SelectShape(string id)
    {
        SelectedShape = id;
        await SelectedShapeChanged.InvokeAsync(id);
    }

    private async Task OnColorChanged(ChangeEventArgs e)
    {
        var color = e.Value?.ToString();
        SelectedColor = color;
        await SelectedColorChanged.InvokeAsync(color);
    }
}
