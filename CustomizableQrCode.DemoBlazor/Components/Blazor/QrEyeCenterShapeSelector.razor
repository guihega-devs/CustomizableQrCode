@using CustomizableQrCode.Models
@using static CustomizableQrCode.Models.QrModels

<div class="combo-visual-group">
    <label class="combo-title">Centro - Ojo</label>
    <div class="combo-gallery">
        @foreach (var shape in (IsExpanded ? EyeCenterShapes : MainShapes))
        //@foreach (var shape in (showAllShapes ? EyeCenterShapes : MainShapes))
        {
            var shapeEnum = Enum.Parse<EyeCenterShape>(shape.Id);
            bool isDisabled = AllowedCenters != null && !AllowedCenters.Contains(shapeEnum);
            //class="combo-option @(SelectedShape == shape.Id ? "selected" : "") @(isDisabled ? "disabled" : "")"
            //class="combo-option @(SelectedEyeShape == shape.Id ? "selected" : "")"
            <button type="button"
                    class="combo-option @(SelectedEyeShape == shape.Id ? "selected" : "") @(isDisabled ? "disabled" : "")"
                    disabled="@isDisabled"
                    @onclick="() => SelectEyeShape(shape.Id)"
                    title="@shape.Name"
                    aria-label="@shape.Name">
                @shape.Svg
            </button>
        }
        @if (OtherShapes.Any())
        {
            <div class="combo-expand-container">
                <button type="button"
                        class="combo-expand more-btn"
                        @onclick="ToggleSection"
                        @onmouseover="() => ShowTooltip = true"
                        @onmouseout="() => ShowTooltip = false"
                        aria-label="@(showAllShapes ? "Ver menos opciones" : "Ver más opciones")">
                    @(IsExpanded ? "-" : "+")
                </button>
                @if (ShowTooltip)
                {
                    <div class="tooltip-combo-expand">
                        @(showAllShapes ? "Ver menos opciones" : "Ver más opciones de formas")
                    </div>
                }
            </div>
        }
        <input type="color"
               value="SelectedEyeColor"
               class="qr-color"
               @oninput="OnColorEyeChanged" />
    </div>
</div>

@code {
    [Parameter] public string SelectedEyeShape { get; set; }
    [Parameter] public EventCallback<string> SelectedEyeShapeChanged { get; set; }
    [Parameter] public string SelectedEyeColor { get; set; }
    [Parameter] public EventCallback<string> SelectedEyeColorChanged { get; set; }
    [Parameter] public bool IsExpanded { get; set; }
    [Parameter] public EventCallback ToggleRequested { get; set; }
    [Parameter] public List<EyeCenterShape> AllowedCenters { get; set; } = new();

    // [Parameter] public List<EyeCenterShape>? AllowedCenters { get; set; }

    // private List<EyeCenterShape> AllowedCentersSafe => AllowedCenters ?? new();

        // Expandible/collapsable
    private bool showAllShapes = false;
    private int maxVisible = 5;

    private List<EyeCenterShapeOption> MainShapes => EyeCenterShapes.Take(maxVisible).ToList();
    private List<EyeCenterShapeOption> OtherShapes => EyeCenterShapes.Skip(maxVisible).ToList();

    private bool ShowTooltip { get; set; }
    private void ToggleSection() => ToggleRequested.InvokeAsync();

    public class EyeCenterShapeOption
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public MarkupString Svg { get; set; }
    }

    private List<EyeCenterShapeOption> EyeCenterShapes = new()
    {
        new EyeCenterShapeOption { Id = "Square", Name = "Square", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
  <g transform='translate(3,3) scale(1.4)'>
  <rect x='6' y='6' width='20' height='20' rx='3' fill='black'/>
  </g>
</svg>" },
        new EyeCenterShapeOption { Id = "Circle", Name = "Circle", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
    <g transform='translate(3,3) scale(1.4)'>
  <circle cx='16' cy='16' r='10' fill='black'/>
  </g>
</svg>" },
        new EyeCenterShapeOption { Id = "Diamond", Name = "Diamond", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
    <g transform='translate(3,3) scale(1.4)'>
  <polygon points='16,6 26,16 16,26 6,16' fill='black'/>
  </g>
</svg>" },
        new EyeCenterShapeOption { Id = "Rounded", Name = "Rounded", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
    <g transform='translate(3,3) scale(1.4)'>
  <rect x='6' y='6' width='20' height='20' rx='7' fill='black'/>
  </g>
</svg>" },
        new EyeCenterShapeOption { Id = "Point", Name = "Point", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
  <g transform='translate(5,5) scale(0.5)'>
    <circle cx='43' cy='41.5' r='10' fill='black'/>
  </g>
</svg>
" },
        new EyeCenterShapeOption { Id = "Leaf", Name = "Leaf", Svg = (MarkupString)@"<svg viewBox='17 15 32 32' width='28' height='28'>
  <g transform='translate(0,1) scale(0.4)'>
    <path d='M80,45 Q110,70 80,110 Q50,70 80,45 Z' fill='black'/>
  </g>
</svg>
" },
        new EyeCenterShapeOption { Id = "CornerRect", Name = "Corner Rect", Svg = (MarkupString)@"<svg viewBox='10 12 32 32' width='28' height='28'>
  <g transform='translate(3,3) scale(0.5)'>
    <path d='
      M38,22
      Q22,22 22,38
      V62
      Q22,78 38,78
      H68
      V38
      Q68,22 52,22
      H38
      Z
    ' fill='black'/>
  </g>
</svg>
" },
        new EyeCenterShapeOption { Id = "TwoCornerRect", Name = "Two Corner Rect", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
  <g transform='translate(3,3) scale(0.5)'>
    <path d='
      M29,28
      Q29,16 41,16
      H66
      V56
      Q66,68 54,68
      H29
      V28
      Z
    ' fill='black'/>
  </g>
</svg>
" },
        new EyeCenterShapeOption { Id = "TwoCornerRectIn", Name = "Two Corner Rect In", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
  <g transform='translate(0,0) scale(0.3)'>
    <!-- Base -->
    <rect x='56' y='46' width='80' height='80' rx='22' fill='black'/>
    <!-- Recortes -->
    <circle cx='136' cy='46' r='22' fill='white'/>
    <circle cx='56' cy='126' r='22' fill='white'/>
  </g>
</svg>
" },
        new EyeCenterShapeOption { Id = "CornerRoundOut", Name = "Corner Round Out", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
   <g transform='translate(5,5) scale(1.3)'>
  <path d='M4,16 Q4,4 16,4 Q28,4 28,16 V28 H16 Q4,28 4,16 Z' fill='black'/>
  </g>
</svg>" },
        new EyeCenterShapeOption { Id = "Plus", Name = "Plus", Svg = (MarkupString)@"<svg viewBox='5 5 32 32' width='28' height='28'>
   <g transform='translate(5,5) scale(1)'>
  <rect x='13' y='6' width='6' height='20' fill='black'/>
  <rect x='6' y='13' width='20' height='6' fill='black'/>
  </g>
</svg>" },
        new EyeCenterShapeOption { Id = "Star", Name = "Star", Svg = (MarkupString)@"<svg viewBox='5 5 32 32' width='28' height='28'>
  <g transform='translate(0,0) scale(1.3)'>
  <polygon points='16,4 19,12 28,12 21,17 24,26 16,21 8,26 11,17 4,12 13,12' fill='black'/>
  </g>
</svg>" },
        new EyeCenterShapeOption { Id = "Starburst", Name = "Starburst", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'>
  <g transform='translate(16,16) scale(0.45)'>
    <path d='
      M0,-28
      L9,-17
      L21,-19
      L18,-8
      L30,-7
      L19,-2
      L29,0
      L19,2
      L30,7
      L18,8
      L21,19
      L9,17
      L0,28
      L-9,17
      L-21,19
      L-18,8
      L-30,7
      L-19,2
      L-29,0
      L-19,-2
      L-30,-7
      L-18,-8
      L-21,-19
      L-9,-17
      Z
    ' fill='black'/>
  </g>
</svg>

" },
        new EyeCenterShapeOption { Id = "ConcaveSquircle", Name = "Concave Squircle", Svg = (MarkupString)@"<svg viewBox='18 17 32 32' width='28' height='28'>
  <g transform='translate(0,0) scale(0.35)'>
    <path d='
      M60,50
      Q100,80 140,50
      Q115,100 140,130
      Q100,110 60,130
      Q85,100 60,50
      Z
    ' fill='black'/>
  </g>
</svg>


" },
        new EyeCenterShapeOption { Id = "DiagonalCut", Name = "Diagonal Cut", Svg = (MarkupString)@"<svg viewBox='5 14 32 32' width='28' height='28'>
  <g transform='translate(15,0) scale(0.35) rotate(40)'>
    <polygon points='40,35 90,35 110,55 90,75 40,75 20,55' fill='black'/>
  </g>
</svg>
" },
        new EyeCenterShapeOption { Id = "TripleBar", Name = "Triple Bar", Svg = (MarkupString)@"<svg viewBox='5 5 32 32' width='28' height='28'>
    <g transform='translate(0,0) scale(1)'>
  <rect x='9' y='10' width='25' height='5' fill='black'/>
  <rect x='9' y='20' width='25' height='5' fill='black'/>
  <rect x='9' y='30' width='25' height='5' fill='black'/>
  </g>
</svg>" },
        new EyeCenterShapeOption { Id = "TripleBarV", Name = "Triple Bar V", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
  <g transform='translate(3,3) scale(1)'>
    <rect x='10' y='10' width='5' height='25' fill='black'/>
    <rect x='20' y='10' width='5' height='25' fill='black'/>
    <rect x='30' y='10' width='5' height='25' fill='black'/>
  </g>
</svg>" },
        new EyeCenterShapeOption { Id = "BubbleGrid", Name = "Bubble Grid", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
    <g transform='translate(0,0) scale(1.6)'>
  <circle cx='12' cy='12' r='3.8' fill='black'/>
  <circle cx='20' cy='12' r='3.8' fill='black'/>
  <circle cx='12' cy='20' r='3.8' fill='black'/>
  <circle cx='20' cy='20' r='3.8' fill='black'/>
  </g>
</svg>" },
        new EyeCenterShapeOption { Id = "BubbleOver", Name = "Bubble Over", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
  <g transform='translate(5,5) scale(0.5)'>
    <!-- Círculos esquinas -->
    <circle cx='33' cy='33' r='21' fill='black'/>
    <circle cx='51' cy='33' r='21' fill='black'/>
    <circle cx='33' cy='51' r='21' fill='black'/>
    <circle cx='51' cy='51' r='21' fill='black'/>
    <!-- Círculos lados -->
    <circle cx='33' cy='42' r='20' fill='black'/>
    <circle cx='51' cy='42' r='20' fill='black'/>
    <circle cx='42' cy='33' r='20' fill='black'/>
    <circle cx='42' cy='51' r='20' fill='black'/>
    <!-- Centro -->
    <circle cx='42' cy='42' r='21' fill='black'/>
  </g>
</svg>
" },
        new EyeCenterShapeOption { Id = "BlockGrid", Name = "Block Grid", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
    <g transform='translate(0,0) scale(1.6)'>
  <rect x='9' y='9' width='6' height='6' fill='black'/>
  <rect x='17' y='9' width='6' height='6' fill='black'/>
  <rect x='9' y='17' width='6' height='6' fill='black'/>
  <rect x='17' y='17' width='6' height='6' fill='black'/>
  </g>
</svg>
" },
        new EyeCenterShapeOption { Id = "IrregularSquare", Name = "Irregular Square", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
  <g transform='translate(3,3) scale(0.5)'>
    <path d='
      M28,25
      L45,23
      L55,25
      L68,23
      L75,30
      L74,45
      L77,53
      L74,65
      L75,72
      L67,74
      L60,75
      L55,74
      L45,75
      L34,73
      L25,70
      L26,63
      L23,52
      L28,45
      Z
    ' fill='black'/>
  </g>
</svg>
" },
        new EyeCenterShapeOption { Id = "WavySquare", Name = "Wavy Square", Svg = (MarkupString)@"<svg viewBox='10 10 32 32' width='28' height='28'>
  <g transform='translate(3,3) scale(0.5)'>
    <path d='
      M28,28
      Q32,24 36,28
      Q40,32 44,28
      Q48,24 52,28
      Q56,32 60,28
      Q64,24 68,28
      Q72,32 68,36
      Q64,40 68,44
      Q72,48 68,52
      Q64,56 68,60
      Q72,64 68,68
      Q64,72 60,68
      Q56,64 52,68
      Q48,72 44,68
      Q40,64 36,68
      Q32,72 28,68
      Q24,64 28,60
      Q32,56 28,52
      Q24,48 28,44
      Q32,40 28,36
      Q24,32 28,28
      Z
    ' fill='black'/>
  </g>
</svg>
" },
    };




    private async Task SelectEyeShape(string id)
    {
        SelectedEyeShape = id;
        await SelectedEyeShapeChanged.InvokeAsync(id);
    }

    private async Task OnColorEyeChanged(ChangeEventArgs e)
    {
        var color = e.Value?.ToString();
        SelectedEyeColor = color;
        await SelectedEyeColorChanged.InvokeAsync(color);
    }

    private bool IsCenterAllowed(string shapeId)
{
    if (Enum.TryParse<EyeCenterShape>(shapeId, out var shapeEnum))
    {
        return AllowedCenters != null && AllowedCenters.Contains(shapeEnum);
    }

    return false;
}
}
