@using CustomizableQrCode.Models

<div class="combo-visual-group">
    <label class="combo-title">Centro - Ojo</label>
    <div class="combo-gallery">
        @foreach (var shape in (showAllShapes ? EyeCenterShapes : MainShapes))
        {
            <button type="button"
                    class="combo-option @(SelectedEyeShape == shape.Id ? "selected" : "")"
                    @onclick="() => SelectEyeShape(shape.Id)"
                    title="@shape.Name"
                    aria-label="@shape.Name">
                @shape.Svg
            </button>
        }
        @if (OtherShapes.Any())
        {            
            <div class="combo-expand-container">
                <button type="button"
                        class="combo-expand more-btn"
                        @onclick="ToggleShapes"
                        @onmouseover="() => ShowTooltip = true"
                        @onmouseout="() => ShowTooltip = false"
                        aria-label="@(showAllShapes ? "Ver menos opciones" : "Ver más opciones")">
                    @(showAllShapes ? "-" : "+")
                </button>
                @if (ShowTooltip)
                {
                    <div class="tooltip-combo-expand">
                        @(showAllShapes ? "Ver menos opciones" : "Ver más opciones de formas")
                    </div>
                }
            </div>
        }
        <input type="color"
               value="SelectedEyeColor"
               class="qr-color"
               @oninput="OnColorEyeChanged" />
    </div>
</div>

@code {
    [Parameter] public string SelectedEyeShape { get; set; }
    [Parameter] public EventCallback<string> SelectedEyeShapeChanged { get; set; }
    [Parameter] public string SelectedEyeColor { get; set; }
    [Parameter] public EventCallback<string> SelectedEyeColorChanged { get; set; }

    // Expandible/collapsable
    private bool showAllShapes = false;
    private int maxVisible = 5;

    private List<EyeCenterShapeOption> MainShapes => EyeCenterShapes.Take(maxVisible).ToList();
    private List<EyeCenterShapeOption> OtherShapes => EyeCenterShapes.Skip(maxVisible).ToList();

    private bool ShowTooltip { get; set; }
    private void ToggleShapes() => showAllShapes = !showAllShapes;

    public class EyeCenterShapeOption
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public MarkupString Svg { get; set; }
    }

    private List<EyeCenterShapeOption> EyeCenterShapes = new()
    {
        new EyeCenterShapeOption { Id = "Square", Name = "Square", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><rect x='8' y='8' width='16' height='16' fill='black' stroke='black' stroke-width='0' rx='2'/></svg>" },
        new EyeCenterShapeOption { Id = "Circle", Name = "Circle", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><circle cx='16' cy='16' r='8' fill='black'/></svg>" },
        new EyeCenterShapeOption { Id = "Diamond", Name = "Diamond", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><polygon points='16,8 24,16 16,24 8,16' fill='black'/></svg>" },
        new EyeCenterShapeOption { Id = "Rounded", Name = "Rounded", Svg = (MarkupString)@"<svg width='91' height='84' viewBox='0 0 91 84' fill='none'>
  <rect x='20' y='15' width='51' height='51' rx='14' fill='black'/>
</svg>" },
        new EyeCenterShapeOption { Id = "Point", Name = "Point", Svg = (MarkupString)@"<svg width='96' height='93' viewBox='0 0 86 83' fill='none'>
  <circle cx='43' cy='41.5' r='10' fill='black'/>
</svg>
" },
        new EyeCenterShapeOption { Id = "Leaf", Name = "Leaf", Svg = (MarkupString)@"<svg width='160' height='140' viewBox='0 0 160 140' fill='none'>
  <path d='M80,45 Q110,70 80,110 Q50,70 80,45 Z' fill='black'/>
</svg>

" },
        new EyeCenterShapeOption { Id = "CornerRect", Name = "Corner Rect", Svg = (MarkupString)@"<svg width='87' height='83' viewBox='0 0 87 83' fill='none'>
  <path d='
    M38,22
    Q22,22 22,38
    V62
    Q22,78 38,78
    H68
    V38
    Q68,22 52,22
    H38
    Z
  ' fill='black'/>
</svg>" },
        new EyeCenterShapeOption { Id = "TwoCornerRect", Name = "Two Corner Rect", Svg = (MarkupString)@"<svg width='87' height='83' viewBox='0 0 87 83' fill='none'>
  <path d='
    M29,28
    Q29,16 41,16
    H66
    V56
    Q66,68 54,68
    H29
    V28
    Z
  ' fill='black'/>
</svg>
" },
        new EyeCenterShapeOption { Id = "CornerRectRadio", Name = "Corner Rect Radio", Svg = (MarkupString)@"<svg width='88' height='83' viewBox='0 0 88 83' fill='none'>
  <path d='
    M26,32,
    Q26,16 52,15
    Q68,16 68,32
    V62
    H52
    Q26,62 26,44
    V32
    Z
  ' fill='black'/>
</svg>" },
        new EyeCenterShapeOption { Id = "TwoCornerRectIn", Name = "Two Corner Rect In", Svg = (MarkupString)@"<svg width='190' height='170' viewBox='0 0 190 170' fill='none'>
  <!-- Base: cuadrado negro con esquinas muy redondeadas -->
  <rect x='56' y='46' width='80' height='80' rx='22' fill='black'/>
  <!-- Recorte cóncavo: superior derecha -->
  <circle cx='136' cy='46' r='22' fill='white'/>
  <!-- Recorte cóncavo: inferior izquierda -->
  <circle cx='56' cy='126' r='22' fill='white'/>
</svg>
" },
        new EyeCenterShapeOption { Id = "CornerRoundOut", Name = "Corner Round Out", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><rect x='8' y='8' width='16' height='16' rx='16' fill='black'/></svg>" },
        new EyeCenterShapeOption { Id = "Plus", Name = "Plus", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><rect x='14' y='8' width='4' height='16' fill='black'/><rect x='8' y='14' width='16' height='4' fill='black'/></svg>" },
        new EyeCenterShapeOption { Id = "Star", Name = "Star", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><polygon points='16,8 18,14 24,14 19,17 21,23 16,19 11,23 13,17 8,14 14,14' fill='black'/></svg>" },
        new EyeCenterShapeOption { Id = "Starburst", Name = "Starburst", Svg = (MarkupString)@"<svg width='125' height='107' viewBox='0 0 125 107' fill='none'>
  <g transform='translate(62.5,53.5)'>
    <path d='
      M0,-28
      L9,-17
      L21,-19
      L18,-8
      L30,-7
      L19,-2
      L29,0
      L19,2
      L30,7
      L18,8
      L21,19
      L9,17
      L0,28
      L-9,17
      L-21,19
      L-18,8
      L-30,7
      L-19,2
      L-29,0
      L-19,-2
      L-30,-7
      L-18,-8
      L-21,-19
      L-9,-17
      Z
    ' fill='black'/>
  </g>
</svg>

" },
        new EyeCenterShapeOption { Id = "ConcaveSquircle", Name = "Concave Squircle", Svg = (MarkupString)@"<svg width='200' height='150' viewBox='0 0 200 150' fill='none'>
  <path d='
    M60,50
    Q100,80 140,50
    Q115,100 140,130
    Q100,110 60,130
    Q85,100 60,50
    Z
  ' fill='black'/>
</svg>
" },
        new EyeCenterShapeOption { Id = "DiagonalCut", Name = "Diagonal Cut", Svg = (MarkupString)@"<svg width='130' height='110' viewBox='0 0 130 110' fill='none'>
  <polygon points='40,35 90,35 110,55 90,75 40,75 20,55' fill='black'/>
</svg>
" },
        new EyeCenterShapeOption { Id = "TripleBar", Name = "Triple Bar", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><rect x='11' y='10' width='10' height='2' fill='black'/><rect x='11' y='15' width='10' height='2' fill='black'/><rect x='11' y='20' width='10' height='2' fill='black'/></svg>" },
        new EyeCenterShapeOption { Id = "TripleBarV", Name = "Triple Bar V", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><rect x='10' y='11' width='2' height='10' fill='black'/><rect x='15' y='11' width='2' height='10' fill='black'/><rect x='20' y='11' width='2' height='10' fill='black'/></svg>" },
        new EyeCenterShapeOption { Id = "BubbleGrid", Name = "Bubble Grid", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><circle cx='12' cy='12' r='3' fill='black'/><circle cx='20' cy='12' r='3' fill='black'/><circle cx='12' cy='20' r='3' fill='black'/><circle cx='20' cy='20' r='3' fill='black'/></svg>" },
        new EyeCenterShapeOption { Id = "BubbleOver", Name = "Bubble Over", Svg = (MarkupString)@"<svg width='180' height='160' viewBox='0 0 84 83' fill='none'>
  <g>
    <!-- Círculos esquinas -->
    <circle cx='33' cy='33' r='21' fill='black'/>
    <circle cx='51' cy='33' r='21' fill='black'/>
    <circle cx='33' cy='51' r='21' fill='black'/>
    <circle cx='51' cy='51' r='21' fill='black'/>
    <!-- Círculos lados -->
    <circle cx='33' cy='42' r='20' fill='black'/>
    <circle cx='51' cy='42' r='20' fill='black'/>
    <circle cx='42' cy='33' r='20' fill='black'/>
    <circle cx='42' cy='51' r='20' fill='black'/>
    <!-- Centro -->
    <circle cx='42' cy='42' r='21' fill='black'/>
  </g>
</svg>
" },
        new EyeCenterShapeOption { Id = "BlockGrid", Name = "Block Grid", Svg = (MarkupString)@"<svg viewBox='0 0 32 32' width='28' height='28'><rect x='10' y='10' width='4' height='4' fill='black'/><rect x='18' y='10' width='4' height='4' fill='black'/><rect x='10' y='18' width='4' height='4' fill='black'/><rect x='18' y='18' width='4' height='4' fill='black'/></svg>" },
        new EyeCenterShapeOption { Id = "IrregularSquare", Name = "Irregular Square", Svg = (MarkupString)@"<svg width='236' height='236' viewBox='0 0 100 100' fill='none'>
  <path d='
    M28,25
    L45,23
    L55,25
    L68,23
    L75,30
    L74,45
    L77,53
    L74,65
    L75,72
    L67,74
    L60,75
    L55,74
    L45,75
    L34,73
    L25,70
    L26,63
    L23,52
    L28,45
    Z
  ' fill='black'/>
</svg>
" },
        new EyeCenterShapeOption { Id = "WavySquare", Name = "Wavy Square", Svg = (MarkupString)@"<svg width='83' height='81' viewBox='0 0 83 81' fill='none'>
  <path d='
    M28,28
    Q32,24 36,28
    Q40,32 44,28
    Q48,24 52,28
    Q56,32 60,28
    Q64,24 68,28
    Q72,32 68,36
    Q64,40 68,44
    Q72,48 68,52
    Q64,56 68,60
    Q72,64 68,68
    Q64,72 60,68
    Q56,64 52,68
    Q48,72 44,68
    Q40,64 36,68
    Q32,72 28,68
    Q24,64 28,60
    Q32,56 28,52
    Q24,48 28,44
    Q32,40 28,36
    Q24,32 28,28
    Z
  ' fill='black'/>
</svg>
" },
    };

    private async Task SelectEyeShape(string id)
    {
        SelectedEyeShape = id;
        await SelectedEyeShapeChanged.InvokeAsync(id);
    }

    private async Task OnColorEyeChanged(ChangeEventArgs e)
    {
        var color = e.Value?.ToString();
        SelectedEyeColor = color;
        await SelectedEyeColorChanged.InvokeAsync(color);
    }
}
