@using CustomizableQrCode.Models
@using static CustomizableQrCode.Models.QrModels

@code {
    [Parameter] public string Content { get; set; }
    [Parameter] public string ModuleColor { get; set; }
    [Parameter] public string EyeFrameColor { get; set; }
    [Parameter] public string EyeCenterColor { get; set; }
    [Parameter] public string BackgroundGradient { get; set; }
    [Parameter] public int Size { get; set; }
    [Parameter] public string LogoBase64 { get; set; }

    [Parameter] public string ModuleShapeStr { get; set; }
    [Parameter] public string EyeFrameShapeStr { get; set; }
    [Parameter] public string EyeCenterShapeStr { get; set; }
    [Parameter] public string ExportFormatStr { get; set; }
    [Parameter] public string CorrectionLevelStr { get; set; }



    private string? SvgContent;

    protected override void OnParametersSet()
    {
        // Conversión segura de enums, con fallback a default si el string no es válido
        var moduleShape = TryParseEnum<ModuleShape>(ModuleShapeStr, ModuleShape.Square);
        var eyeFrameShape = TryParseEnum<EyeFrameShape>(EyeFrameShapeStr, EyeFrameShape.Square);
        var eyeCenterShape = TryParseEnum<EyeCenterShape>(EyeCenterShapeStr, EyeCenterShape.Square);
        var exportFormat = TryParseEnum<QrExportFormat>(ExportFormatStr, QrExportFormat.Svg);
        var correctionLevel = TryParseEnum<QrCorrectionLevel>(CorrectionLevelStr, QrCorrectionLevel.Q);
        // --- RESTRICCIÓN de forma de ojo según marco ---
        eyeCenterShape = EnforceEyeCenterShapeRestriction(eyeFrameShape, eyeCenterShape);

        var qr = new QrCodeBuilder()
            .WithContent(Content ?? "https://midominio.com")
            .WithModuleShape(moduleShape)
            .WithModuleColor(ModuleColor ?? "#4a90e2")
            .WithEyeFrameShape(eyeFrameShape)
            .WithEyeFrameColor(EyeFrameColor ?? "#000000")
            .WithEyeCenterShape(eyeCenterShape)
            .WithEyeCenterColor(EyeCenterColor ?? "#000000")
            .WithBackgroundGradient(BackgroundGradient ?? "#fff")
            .WithExportFormat(exportFormat)
            .WithCorrectionLevel(correctionLevel)
            .WithSize(Size > 0 ? Size : 512)
            .WithLogoBase64(LogoBase64)
            .Build();

        SvgContent = qr.AsSvg();
    }

    // Método genérico para enums con fallback
    private static TEnum TryParseEnum<TEnum>(string value, TEnum defaultValue) where TEnum : struct
    {
        if (!string.IsNullOrEmpty(value) && Enum.TryParse(value, true, out TEnum result))
            return result;
        return defaultValue;
    }

    // Forza Circle si el marco es Leaf o Diamond
    private static EyeCenterShape EnforceEyeCenterShapeRestriction(EyeFrameShape marco, EyeCenterShape centro)
    {
        if (marco == EyeFrameShape.Leaf)
        {
            if (centro == EyeCenterShape.Circle)
            {
                return EyeCenterShape.Circle;
            }
            else
            {
                return EyeCenterShape.Leaf;
            }
        }
        else if (marco == EyeFrameShape.Diamond)
        {
            if (centro == EyeCenterShape.Circle)
            {
                return EyeCenterShape.Circle;
            }
            else
            {
                return EyeCenterShape.Diamond;
            }
        }
        return centro;
    }
}

@if (!string.IsNullOrWhiteSpace(SvgContent))
{
    <div style="width:@Size" @key="Content">
        @((MarkupString)SvgContent)
    </div>
}
