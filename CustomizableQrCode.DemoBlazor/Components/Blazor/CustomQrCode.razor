@using CustomizableQrCode.Models
@using static CustomizableQrCode.Models.QrModels

@code {
    [Parameter] public string Content { get; set; }
    [Parameter] public string ModuleColor { get; set; }
    [Parameter] public string EyeFrameColor { get; set; }
    [Parameter] public string EyeCenterColor { get; set; }
    [Parameter] public string BackgroundGradient { get; set; }
    [Parameter] public int Size { get; set; }
    [Parameter] public string LogoBase64 { get; set; }

    [Parameter] public string ModuleShapeStr { get; set; }
    [Parameter] public string EyeFrameShapeStr { get; set; }
    [Parameter] public string EyeCenterShapeStr { get; set; }
    [Parameter] public string ExportFormatStr { get; set; }
    [Parameter] public string CorrectionLevelStr { get; set; }

    [Parameter]
    public QrCodeOptions QrOptions { get; set; } = new QrCodeOptions();
    [Parameter]
    public EventCallback<string> OnSvgGenerated { get; set; }

    private string? SvgContent;
    private string? LastEmittedSvg; // <-- Nuevo: guarda el último emitido

    protected override void OnParametersSet()
    {
        if (QrOptions is null)
        {
            SvgContent = string.Empty;
            return;
        }
        
        var moduleShape = TryParseEnum<ModuleShape>(QrOptions.ModuleShape.ToString(), ModuleShape.Square);
        var eyeFrameShape = TryParseEnum<EyeFrameShape>(QrOptions.EyeFrameShape.ToString(), EyeFrameShape.Square);
        var eyeCenterShape = TryParseEnum<EyeCenterShape>(QrOptions.EyeCenterShape.ToString(), EyeCenterShape.Square);
        var exportFormat = TryParseEnum<QrExportFormat>(QrOptions.ExportFormat.ToString(), QrExportFormat.Svg);
        var correctionLevel = TryParseEnum<QrCorrectionLevel>(QrOptions.CorrectionLevel.ToString(), QrCorrectionLevel.Q);

        // --- RESTRICCIÓN de forma de ojo según marco ---
        eyeCenterShape = EnforceEyeCenterShapeRestriction(eyeFrameShape, eyeCenterShape);

        var qr = new QrCodeBuilder()
            .WithContent(QrOptions.Content ?? "https://midominio.com")
            .WithModuleShape(moduleShape)
            .WithModuleColor(QrOptions.ModuleColor ?? "#4a90e2")
            .WithEyeFrameShape(eyeFrameShape)
            .WithEyeFrameColor(QrOptions.EyeFrameColor ?? "#000000")
            .WithEyeCenterShape(eyeCenterShape)
            .WithEyeCenterColor(QrOptions.EyeCenterColor ?? "#000000")
            .WithBackgroundGradient(QrOptions.BgColor ?? "#f7f7f7")
            .WithExportFormat(exportFormat)
            .WithCorrectionLevel(correctionLevel)
            .WithSize(QrOptions.Size > 0 ? QrOptions.Size : 512)
            .WithLogoBase64(QrOptions.LogoBase64)
            .Build();

        SvgContent = qr.AsSvg();

        //OnSvgGenerated.InvokeAsync(SvgContent); // Llama al padre con el SVG listo
    }

    // Método genérico para enums con fallback
    private static TEnum TryParseEnum<TEnum>(string value, TEnum defaultValue) where TEnum : struct
    {
        if (!string.IsNullOrEmpty(value) && Enum.TryParse(value, true, out TEnum result))
            return result;
        return defaultValue;
    }

    // Forza Circle si el marco es Leaf o Diamond
    private static EyeCenterShape EnforceEyeCenterShapeRestriction(EyeFrameShape marco, EyeCenterShape centro)
    {
        if (marco == EyeFrameShape.Leaf)
        {
            if (centro == EyeCenterShape.Circle)
            {
                return EyeCenterShape.Circle;
            }
            else
            {
                return EyeCenterShape.Leaf;
            }
        }
        else if (marco == EyeFrameShape.Diamond)
        {
            if (centro == EyeCenterShape.Circle)
            {
                return EyeCenterShape.Circle;
            }
            else
            {
                return EyeCenterShape.Diamond;
            }
        }
        return centro;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Solo dispara el evento si el SVG cambió
        if (!string.IsNullOrWhiteSpace(SvgContent) && SvgContent != LastEmittedSvg)
        {
            LastEmittedSvg = SvgContent;
            // Ejecuta el callback fuera del render (evita loop)
            await OnSvgGenerated.InvokeAsync(SvgContent);
        }
    }
}

@if (!string.IsNullOrWhiteSpace(SvgContent))
{
    <div style="width:@Size" @key="Content">
        @((MarkupString)SvgContent)
    </div>
}
